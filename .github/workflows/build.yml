name: Kotlin CI
on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择要构建的分支 (main, beta, dev)'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - beta
          - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List files in current directory
        run: ls -la

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Add jks file
        run: |
          set -e
          echo "${{ secrets.SIGN_KEY }}" > ./encoded_key
          if base64 -d -i encoded_key > keystore.jks; then
            echo "Successfully decoded and created keystore.jks"
          else
            echo "Failed to decode keystore.jks"
            exit 1
          fi
          rm encoded_key

      - name: Add SHORT_SHA Environment Variable
        id: short-sha
        shell: bash
        run: echo "short_sha=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Build with Gradle (Release)
        if: inputs.branch == 'main'
        env:
          VERSION_CODE: ${{ github.run_number }}
        run: ./gradlew :tv:assembleRelease

      - name: Build with Gradle (Dev)
        if: (inputs.branch == 'beta' || inputs.branch == 'dev')
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VERSION_CODE: ${{ github.run_number }}
        run: ./gradlew :tv:assembleDebug --warning-mode=all

      - name: Upload Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: mytv-android.apk
          path: tv/build/outputs/apk/release/*.apk

      - name: Move Metadata (Dev)
        if: github.event_name == 'workflow_dispatch' && (inputs.branch == 'beta' || inputs.branch == 'dev')
        run: |
          mv tv/build/outputs/apk/original/debug/output-metadata.json tv/build/outputs/apk/release/output-metadata.json

      - name: Move Metadata (Release)
        if: github.event_name == 'workflow_dispatch' && inputs.branch == 'main'
        run: |
          mv tv/build/outputs/apk/original/release/output-metadata.json tv/build/outputs/apk/release/output-metadata.json

      - name: Read apk output metadata
        if: github.event_name == 'workflow_dispatch'
        id: apk-meta-release
        uses: juliangruber/read-file-action@v1
        with:
          path: tv/build/outputs/apk/release/output-metadata.json

      - name: Parse apk infos
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "info_version_code=${{ fromJson(steps.apk-meta-release.outputs.content).elements[0].versionCode }}" >> $GITHUB_ENV
          echo "info_version_name=${{ fromJson(steps.apk-meta-release.outputs.content).elements[0].versionName }}" >> $GITHUB_ENV

      - name: Gen Tag(Release)
        if: github.event_name == 'workflow_dispatch' && inputs.branch == 'main'
        run: |
          echo "release_title=V${{ env.info_version_name }} （稳定版）" >> $GITHUB_ENV

      - name: Gen Tag(Beta)
        if: github.event_name == 'workflow_dispatch' && inputs.branch == 'beta'
        run: |
          echo "release_title=V${{ env.info_version_name }} （测试版）" >> $GITHUB_ENV

      - name: Gen Tag(Dev)
        if: github.event_name == 'workflow_dispatch' && inputs.branch == 'dev'
        run: |
          echo "release_title=V${{ env.info_version_name }} （开发版）" >> $GITHUB_ENV

      - name: Publish Release
        if: github.event_name == 'workflow_dispatch' && inputs.branch == 'main'
        uses: softprops/action-gh-release@v2
        with:
          files: tv/build/outputs/apk/release/*.apk
          make_latest: true

      - name: Publish Pre-Release
        if: github.event_name == 'workflow_dispatch' && (inputs.branch == 'beta' || inputs.branch == 'dev')
        uses: softprops/action-gh-release@v2
        with:
          files: tv/build/outputs/apk/release/*.apk
          name: ${{ env.release_title }}
          body: ${{ env.changelog }}
          generate_release_notes: true
          prerelease: true
